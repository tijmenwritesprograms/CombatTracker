@page "/combat-tracker"
@implements IDisposable

@using CombatTracker.WebAssembly.Models
@using CombatTracker.WebAssembly.Services
@inject CombatStateService CombatStateService
@inject NavigationManager NavigationManager
@inject KeyboardShortcutService KeyboardShortcuts

<PageTitle>Combat Tracker - D&D Combat Tracker</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Combat Tracker</h1>
    <KeyboardShortcutsHelp />
</div>

@if (!CombatStateService.IsCombatActive)
{
    <div class="alert alert-warning" role="alert">
        No active combat. Please <a href="/combat-setup">start a combat</a> first.
    </div>
}
else
{
    <div class="row mb-3">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center flex-wrap">
                        <div class="mb-2 mb-md-0">
                            <h4 class="mb-0">Round @CombatStateService.ActiveCombat!.Round</h4>
                        </div>
                        <div class="btn-group mb-2 mb-md-0">
                            <button class="btn btn-outline-secondary" @onclick="PreviousTurn" title="Previous Turn (P)">
                                <span class="bi bi-arrow-left"></span> Previous Turn
                            </button>
                            <button class="btn btn-primary" @onclick="NextTurn" title="Next Turn (N)">
                                Next Turn <span class="bi bi-arrow-right"></span>
                            </button>
                        </div>
                        <div>
                            <button class="btn btn-danger" @onclick="EndCombat" title="End Combat (E)">
                                <span class="bi bi-x-circle"></span> End Combat
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h4>Initiative Order</h4>
                </div>
                <div class="card-body p-0">
                    <table class="table table-hover mb-0">
                        <thead>
                            <tr>
                                <th style="width: 50px;"></th>
                                <th>Initiative</th>
                                <th>Name</th>
                                <th>Type</th>
                                <th>HP</th>
                                <th>AC</th>
                                <th>Status</th>
                                <th style="width: 200px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var combatants = CombatStateService.GetCombatantsWithData();
                                for (int i = 0; i < combatants.Count; i++)
                                {
                                    var (instance, data) = combatants[i];
                                    var isCurrentTurn = i == CombatStateService.ActiveCombat!.TurnIndex;
                                    var rowClass = isCurrentTurn ? "table-primary" : "";
                                    
                                    // Apply strikethrough for unconscious/dead combatants
                                    var textClass = instance.Status != Status.Alive ? "text-decoration-line-through text-muted" : "";

                                    <tr class="@rowClass slide-in">
                                        <td>
                                            @if (isCurrentTurn)
                                            {
                                                <div class="initiative-indicator" title="Current Turn">
                                                    <span class="bi bi-caret-right-fill" style="font-size: 1rem; color: white;"></span>
                                                </div>
                                            }
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <strong style="font-size: 1.1rem;">@instance.Initiative</strong>
                                            </div>
                                        </td>
                                        <td class="@textClass">
                                            <strong>@data.Name</strong>
                                        </td>
                                        <td class="@textClass">@data.Type</td>
                                        <td>
                                            <div>
                                                <span class="@textClass">@instance.HpCurrent / @data.HpMax</span>
                                                @if (instance.HpCurrent <= 0)
                                                {
                                                    <span class="badge bg-danger ms-1">0 HP</span>
                                                }
                                                else if (instance.HpCurrent < data.HpMax / 2)
                                                {
                                                    <span class="badge bg-warning ms-1">Bloodied</span>
                                                }
                                            </div>
                                            @if (instance.HpCurrent > 0)
                                            {
                                                var hpPercent = (int)((double)instance.HpCurrent / data.HpMax * 100);
                                                <div class="hp-bar" title="HP: @instance.HpCurrent / @data.HpMax">
                                                    <div class="hp-bar-fill" style="width: @hpPercent%"></div>
                                                </div>
                                            }
                                        </td>
                                        <td class="@textClass">
                                            <span class="badge bg-secondary">AC @data.AC</span>
                                        </td>
                                        <td>
                                            @if (instance.Status == Status.Alive)
                                            {
                                                <span class="badge bg-success">Alive</span>
                                            }
                                            else if (instance.Status == Status.Unconscious)
                                            {
                                                <span class="badge bg-danger">Unconscious</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-dark">Dead</span>
                                            }
                                        </td>
                                        <td>
                                            @if (instance.Status == Status.Alive)
                                            {
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-danger" @onclick="() => ShowDamageModal(instance.Index)" title="Apply Damage (D)">
                                                        <span class="bi bi-dash-circle"></span> Damage
                                                    </button>
                                                    <button class="btn btn-outline-success" @onclick="() => ShowHealModal(instance.Index)" title="Apply Healing (H)">
                                                        <span class="bi bi-plus-circle"></span> Heal
                                                    </button>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-success" @onclick="() => ShowHealModal(instance.Index)" title="Apply Healing (H)">
                                                        <span class="bi bi-plus-circle"></span> Heal
                                                    </button>
                                                </div>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h4>Combat Log</h4>
                </div>
                <div class="card-body" style="max-height: 600px; overflow-y: auto; background: linear-gradient(to bottom, #ffffff 0%, #f8f9fa 100%);">
                    @if (CombatStateService.CombatLog.Count == 0)
                    {
                        <p class="text-muted">No entries yet.</p>
                    }
                    else
                    {
                        <div>
                            @foreach (var entry in CombatStateService.CombatLog.OrderByDescending(e => e.Timestamp))
                            {
                                var logClass = entry.Type switch
                                {
                                    "Turn" => "log-turn",
                                    "Damage" => "log-damage",
                                    "Heal" => "log-heal",
                                    "Status" => "log-status",
                                    _ => ""
                                };

                                <div class="combat-log-entry @logClass fade-in">
                                    <div class="d-flex w-100 justify-content-between mb-1">
                                        <small class="text-muted fw-bold">Round @entry.Round</small>
                                        <small class="text-muted">@entry.Timestamp.ToString("HH:mm:ss")</small>
                                    </div>
                                    <div class="mb-1">
                                        @if (entry.Type == "Turn")
                                        {
                                            <span class="badge bg-primary me-1">Turn</span>
                                        }
                                        else if (entry.Type == "Damage")
                                        {
                                            <span class="badge bg-danger me-1">Damage</span>
                                        }
                                        else if (entry.Type == "Heal")
                                        {
                                            <span class="badge bg-success me-1">Heal</span>
                                        }
                                        else if (entry.Type == "Status")
                                        {
                                            <span class="badge bg-warning me-1">Status</span>
                                        }
                                        <span>@entry.Message</span>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @* Damage Modal *@
    @if (showDamageModal)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Apply Damage</h5>
                        <button type="button" class="btn-close" @onclick="CloseModals"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Damage Amount</label>
                            <input type="number" class="form-control" @bind="damageAmount" min="1" />
                        </div>
                        <div class="btn-group w-100 mb-2">
                            <button class="btn btn-outline-secondary" @onclick="() => damageAmount = 5">5</button>
                            <button class="btn btn-outline-secondary" @onclick="() => damageAmount = 10">10</button>
                            <button class="btn btn-outline-secondary" @onclick="() => damageAmount = 15">15</button>
                            <button class="btn btn-outline-secondary" @onclick="() => damageAmount = 20">20</button>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ApplyDamage">Apply Damage</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @* Heal Modal *@
    @if (showHealModal)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Apply Healing</h5>
                        <button type="button" class="btn-close" @onclick="CloseModals"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Healing Amount</label>
                            <input type="number" class="form-control" @bind="healAmount" min="1" />
                        </div>
                        <div class="btn-group w-100 mb-2">
                            <button class="btn btn-outline-secondary" @onclick="() => healAmount = 5">5</button>
                            <button class="btn btn-outline-secondary" @onclick="() => healAmount = 10">10</button>
                            <button class="btn btn-outline-secondary" @onclick="() => healAmount = 15">15</button>
                            <button class="btn btn-outline-secondary" @onclick="() => healAmount = 20">20</button>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModals">Cancel</button>
                        <button type="button" class="btn btn-success" @onclick="ApplyHeal">Apply Healing</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private bool showDamageModal;
    private bool showHealModal;
    private int selectedCombatantIndex;
    private int damageAmount = 5;
    private int healAmount = 5;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CombatStateService.InitializeAsync();
            await KeyboardShortcuts.InitializeAsync();
            RegisterKeyboardShortcuts();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        CombatStateService.OnChange += RefreshState;
        
        // Redirect if no active combat
        if (!CombatStateService.IsCombatActive)
        {
            // Allow the page to render the warning message
        }
    }

    private void RegisterKeyboardShortcuts()
    {
        // Register keyboard shortcuts for combat actions
        KeyboardShortcuts.RegisterShortcut("n", async () => 
        {
            if (CombatStateService.IsCombatActive)
            {
                NextTurn();
                await InvokeAsync(StateHasChanged);
            }
        });

        KeyboardShortcuts.RegisterShortcut("p", async () => 
        {
            if (CombatStateService.IsCombatActive)
            {
                PreviousTurn();
                await InvokeAsync(StateHasChanged);
            }
        });

        KeyboardShortcuts.RegisterShortcut("d", async () => 
        {
            if (CombatStateService.IsCombatActive && !showDamageModal && !showHealModal)
            {
                var currentIndex = CombatStateService.ActiveCombat?.TurnIndex ?? 0;
                ShowDamageModal(currentIndex);
                await InvokeAsync(StateHasChanged);
            }
        });

        KeyboardShortcuts.RegisterShortcut("h", async () => 
        {
            if (CombatStateService.IsCombatActive && !showDamageModal && !showHealModal)
            {
                var currentIndex = CombatStateService.ActiveCombat?.TurnIndex ?? 0;
                ShowHealModal(currentIndex);
                await InvokeAsync(StateHasChanged);
            }
        });

        KeyboardShortcuts.RegisterShortcut("escape", async () => 
        {
            CloseModals();
            await InvokeAsync(StateHasChanged);
        });
    }

    private void RefreshState()
    {
        InvokeAsync(StateHasChanged);
    }

    private void NextTurn()
    {
        CombatStateService.NextTurn();
    }

    private void PreviousTurn()
    {
        CombatStateService.PreviousTurn();
    }

    private void ShowDamageModal(int combatantIndex)
    {
        selectedCombatantIndex = combatantIndex;
        damageAmount = 5;
        showDamageModal = true;
    }

    private void ShowHealModal(int combatantIndex)
    {
        selectedCombatantIndex = combatantIndex;
        healAmount = 5;
        showHealModal = true;
    }

    private void CloseModals()
    {
        showDamageModal = false;
        showHealModal = false;
    }

    private void ApplyDamage()
    {
        if (damageAmount > 0)
        {
            CombatStateService.ApplyDamage(selectedCombatantIndex, damageAmount);
        }
        CloseModals();
    }

    private void ApplyHeal()
    {
        if (healAmount > 0)
        {
            CombatStateService.ApplyHealing(selectedCombatantIndex, healAmount);
        }
        CloseModals();
    }

    private void EndCombat()
    {
        CombatStateService.EndCombat();
        NavigationManager.NavigateTo("/combat-setup");
    }

    public void Dispose()
    {
        CombatStateService.OnChange -= RefreshState;
        
        // Dispose keyboard shortcuts service
        // Note: We can't await here in a synchronous Dispose, but the service handles cleanup properly
        _ = KeyboardShortcuts.DisposeAsync();
    }
}
