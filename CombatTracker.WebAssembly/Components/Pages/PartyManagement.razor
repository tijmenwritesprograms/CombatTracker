@page "/party-management"
@using CombatTracker.WebAssembly.Models
@using CombatTracker.WebAssembly.Services
@inject PartyStateService PartyState
@implements IDisposable


<PageTitle>Party Management - D&D Combat Tracker</PageTitle>

<h1>Party Management</h1>

<div class="mb-4">
    <button class="btn btn-primary" @onclick="ShowCreatePartyForm">
        <span class="bi bi-plus-circle me-2"></span>Create New Party
    </button>
    <button class="btn btn-outline-secondary ms-2" @onclick="SeedTestParty">
        Seed Test Party
    </button>
</div>

@if (_showPartyForm)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5>@(_editingParty == null ? "Create New Party" : "Edit Party")</h5>
        </div>
        <div class="card-body">
            <EditForm Model="_partyForm" OnValidSubmit="SaveParty">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label class="form-label">Party Name</label>
                    <InputText class="form-control" @bind-Value="_partyForm.Name" />
                    <ValidationMessage For="@(() => _partyForm.Name)" />
                </div>
                <div>
                    <button type="submit" class="btn btn-success me-2">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="CancelPartyForm">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (_parties.Count == 0)
{
    <div class="alert alert-info">
        No parties created yet. Click "Create New Party" to get started!
    </div>
}
else
{
    <div class="row">
        @foreach (var party in _parties)
        {
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">@party.Name</h5>
                        <div>
                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditParty(party)">Edit</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteParty(party.Id)">Delete</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <h6>Characters (@party.Characters.Count)</h6>
                        
                        @if (party.Characters.Count == 0)
                        {
                            <p class="text-muted">No characters in this party.</p>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Class</th>
                                            <th>Level</th>
                                            <th>HP</th>
                                            <th>AC</th>
                                            <th>Init</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var character in party.Characters)
                                        {
                                            <tr>
                                                <td>@character.Name</td>
                                                <td>@character.Class</td>
                                                <td>@character.Level</td>
                                                <td>@character.HpCurrent/@character.HpMax</td>
                                                <td>@character.AC</td>
                                                <td>@(character.InitiativeModifier >= 0 ? "+" : "")@character.InitiativeModifier</td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditCharacter(party.Id, character)">Edit</button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCharacter(party.Id, character.Id)">Delete</button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        
                        <button class="btn btn-sm btn-success mt-2" @onclick="() => ShowAddCharacterForm(party.Id)">
                            <span class="bi bi-plus-circle me-2"></span>Add Character
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (_showCharacterForm)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(_editingCharacter == null ? "Add Character" : "Edit Character")</h5>
                    <button type="button" class="btn-close" @onclick="CancelCharacterForm"></button>
                </div>
                <EditForm Model="_characterForm" OnValidSubmit="SaveCharacter">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Name</label>
                                <InputText class="form-control" @bind-Value="_characterForm.Name" />
                                <ValidationMessage For="@(() => _characterForm.Name)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Class</label>
                                <InputText class="form-control" @bind-Value="_characterForm.Class" />
                                <ValidationMessage For="@(() => _characterForm.Class)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3 mb-3">
                                <label class="form-label">Level</label>
                                <InputNumber class="form-control" @bind-Value="_characterForm.Level" />
                                <ValidationMessage For="@(() => _characterForm.Level)" />
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label">HP Max</label>
                                <InputNumber class="form-control" @bind-Value="_characterForm.HpMax" />
                                <ValidationMessage For="@(() => _characterForm.HpMax)" />
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label">HP Current</label>
                                <InputNumber class="form-control" @bind-Value="_characterForm.HpCurrent" />
                                <ValidationMessage For="@(() => _characterForm.HpCurrent)" />
                            </div>
                            <div class="col-md-3 mb-3">
                                <label class="form-label">AC</label>
                                <InputNumber class="form-control" @bind-Value="_characterForm.AC" />
                                <ValidationMessage For="@(() => _characterForm.AC)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Initiative Modifier</label>
                                <InputNumber class="form-control" @bind-Value="_characterForm.InitiativeModifier" />
                                <ValidationMessage For="@(() => _characterForm.InitiativeModifier)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Notes (Optional)</label>
                            <InputTextArea class="form-control" @bind-Value="_characterForm.Notes" rows="3" />
                            <ValidationMessage For="@(() => _characterForm.Notes)" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelCharacterForm">Cancel</button>
                        <button type="submit" class="btn btn-primary">Save Character</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<div class="mt-4">
    <a href="/" class="btn btn-secondary">Back to Home</a>
</div>

<style>
    .bi {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        background-size: cover;
        vertical-align: middle;
    }

    .bi-plus-circle {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath d='M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z'/%3E%3Cpath d='M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z'/%3E%3C/svg%3E");
    }
</style>

@code {
    private List<Party> _parties = new();
    private bool _showPartyForm = false;
    private bool _showCharacterForm = false;
    private Party _partyForm = new();
    private Character _characterForm = new();
    private Party? _editingParty = null;
    private Character? _editingCharacter = null;
    private int _currentPartyId = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PartyState.InitializeAsync();
            LoadParties();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        PartyState.OnChange += StateHasChanged;
    }

    private void LoadParties()
    {
        _parties = PartyState.GetAllParties().ToList();
    }

    private void ShowCreatePartyForm()
    {
        _partyForm = new Party();
        _editingParty = null;
        _showPartyForm = true;
    }

    private void SeedTestParty()
    {
        PartyState.SeedSampleParty();
        LoadParties();
    }

    private void EditParty(Party party)
    {
        _editingParty = party;
        _partyForm = new Party { Id = party.Id, Name = party.Name };
        _showPartyForm = true;
    }

    private void SaveParty()
    {
        if (_editingParty == null)
        {
            PartyState.CreateParty(_partyForm.Name);
        }
        else
        {
            PartyState.UpdateParty(_partyForm);
        }
        LoadParties();
        CancelPartyForm();
    }

    private void CancelPartyForm()
    {
        _showPartyForm = false;
        _partyForm = new Party();
        _editingParty = null;
    }

    private void DeleteParty(int partyId)
    {
        PartyState.DeleteParty(partyId);
        LoadParties();
    }

    private void ShowAddCharacterForm(int partyId)
    {
        _currentPartyId = partyId;
        _characterForm = new Character { Level = 1, HpMax = 10, HpCurrent = 10, AC = 10 };
        _editingCharacter = null;
        _showCharacterForm = true;
    }

    private void EditCharacter(int partyId, Character character)
    {
        _currentPartyId = partyId;
        _editingCharacter = character;
        _characterForm = new Character
        {
            Id = character.Id,
            Name = character.Name,
            Class = character.Class,
            Level = character.Level,
            HpCurrent = character.HpCurrent,
            HpMax = character.HpMax,
            AC = character.AC,
            InitiativeModifier = character.InitiativeModifier,
            Notes = character.Notes
        };
        _showCharacterForm = true;
    }

    private void SaveCharacter()
    {
        if (_editingCharacter == null)
        {
            PartyState.AddCharacter(_currentPartyId, _characterForm);
        }
        else
        {
            PartyState.UpdateCharacter(_currentPartyId, _characterForm);
        }
        LoadParties();
        CancelCharacterForm();
    }

    private void CancelCharacterForm()
    {
        _showCharacterForm = false;
        _characterForm = new Character();
        _editingCharacter = null;
        _currentPartyId = 0;
    }

    private void DeleteCharacter(int partyId, int characterId)
    {
        PartyState.DeleteCharacter(partyId, characterId);
        LoadParties();
    }

    public void Dispose()
    {
        PartyState.OnChange -= StateHasChanged;
    }
}
