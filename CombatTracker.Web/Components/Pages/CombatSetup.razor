@page "/combat-setup"
@rendermode InteractiveServer
@implements IDisposable
@using CombatTracker.Web.Models
@using CombatTracker.Web.Services
@inject PartyStateService PartyStateService
@inject CombatStateService CombatStateService
@inject NavigationManager NavigationManager

<PageTitle>Combat Setup - D&D Combat Tracker</PageTitle>

<h1>Combat Setup</h1>

<div class="row">
    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header">
                <h4>Party Selection</h4>
            </div>
            <div class="card-body">
                @if (parties.Count == 0)
                {
                    <div class="alert alert-warning" role="alert">
                        No parties available. Please <a href="/party-management">create a party</a> first.
                    </div>
                }
                else
                {
                    <div class="mb-3">
                        <label for="partySelect" class="form-label">Select Party</label>
                        <select id="partySelect" class="form-select" @onchange="OnPartySelected">
                            <option value="">-- Select a party --</option>
                            @foreach (var party in parties)
                            {
                                <option value="@party.Id">@party.Name (@party.Characters.Count characters)</option>
                            }
                        </select>
                    </div>
                }
            </div>
        </div>

        <div class="card mb-3">
            <div class="card-header">
                <h4>Add Monster</h4>
            </div>
            <div class="card-body">
                <EditForm Model="@newMonster" OnValidSubmit="@HandleAddMonster" FormName="AddMonsterForm">
                    <AntiforgeryToken />
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="monsterName" class="form-label">Name</label>
                        <InputText id="monsterName" class="form-control" @bind-Value="newMonster.Name" />
                        <ValidationMessage For="@(() => newMonster.Name)" />
                    </div>

                    <div class="mb-3">
                        <label for="monsterType" class="form-label">Type</label>
                        <InputText id="monsterType" class="form-control" @bind-Value="newMonster.Type" />
                        <ValidationMessage For="@(() => newMonster.Type)" />
                    </div>

                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="monsterHp" class="form-label">HP</label>
                            <InputNumber id="monsterHp" class="form-control" @bind-Value="newMonster.Hp" />
                            <ValidationMessage For="@(() => newMonster.Hp)" />
                        </div>

                        <div class="col-md-4 mb-3">
                            <label for="monsterAc" class="form-label">AC</label>
                            <InputNumber id="monsterAc" class="form-control" @bind-Value="newMonster.AC" />
                            <ValidationMessage For="@(() => newMonster.AC)" />
                        </div>

                        <div class="col-md-4 mb-3">
                            <label for="monsterInitMod" class="form-label">Init Mod</label>
                            <InputNumber id="monsterInitMod" class="form-control" @bind-Value="newMonster.InitiativeModifier" />
                            <ValidationMessage For="@(() => newMonster.InitiativeModifier)" />
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary">Add Monster</button>
                </EditForm>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card mb-3">
            <div class="card-header">
                <h4>Combatants (@combatants.Count)</h4>
            </div>
            <div class="card-body">
                @if (combatants.Count == 0)
                {
                    <p class="text-muted">No combatants added yet. Select a party or add monsters.</p>
                }
                else
                {
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>HP</th>
                                <th>AC</th>
                                <th>Init Mod</th>
                                <th>Initiative</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var kvp in combatants)
                            {
                                var combatant = kvp.Value;
                                <tr>
                                    <td>@combatant.Name</td>
                                    <td>@combatant.Type</td>
                                    <td>@combatant.HpMax</td>
                                    <td>@combatant.AC</td>
                                    <td>@(combatant.InitiativeModifier >= 0 ? "+" : "")@combatant.InitiativeModifier</td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm" style="width: 80px;" 
                                               value="@combatant.Initiative" 
                                               @onchange="@(e => OnInitiativeChanged(kvp.Key, e.Value?.ToString()))" />
                                    </td>
                                    <td>
                                        @if (!combatant.IsCharacter)
                                        {
                                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveMonster(combatant.ReferenceId)">
                                                Remove
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="mt-3">
                        <button class="btn btn-secondary me-2" @onclick="RollInitiative">
                            <span class="bi bi-dice-5"></span> Roll Initiative
                        </button>
                        <button class="btn btn-primary me-2" @onclick="StartCombat" disabled="@(!canStartCombat)">
                            <span class="bi bi-play-fill"></span> Start Combat
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="ResetCombat">
                            <span class="bi bi-arrow-counterclockwise"></span> Reset
                        </button>
                    </div>

                    @if (!canStartCombat && combatants.Count > 0)
                    {
                        <div class="alert alert-warning mt-3" role="alert">
                            Add at least one combatant to start combat.
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Party> parties = new();
    private Dictionary<string, CombatantSetupData> combatants = new();
    private Monster newMonster = new() { Type = "Humanoid" };
    private bool canStartCombat => CombatStateService.IsValidForCombat();

    protected override void OnInitialized()
    {
        parties = PartyStateService.GetAllParties().ToList();
        combatants = CombatStateService.Combatants;
        
        PartyStateService.OnChange += RefreshParties;
        CombatStateService.OnChange += RefreshCombatants;
    }

    private void OnPartySelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var partyId))
        {
            var party = PartyStateService.GetPartyById(partyId);
            CombatStateService.SelectParty(party);
        }
        else
        {
            CombatStateService.SelectParty(null);
        }
    }

    private void HandleAddMonster()
    {
        CombatStateService.AddMonster(newMonster);
        newMonster = new Monster { Type = "Humanoid" };
    }

    private void RemoveMonster(int monsterId)
    {
        CombatStateService.RemoveMonster(monsterId);
    }

    private void RollInitiative()
    {
        CombatStateService.RollInitiativeForAll();
    }

    private void OnInitiativeChanged(string combatantKey, string? value)
    {
        if (int.TryParse(value, out var initiative))
        {
            CombatStateService.SetInitiative(combatantKey, initiative);
        }
    }

    private void StartCombat()
    {
        if (canStartCombat)
        {
            // TODO: Navigate to combat tracker when implemented
            // For now, just show a message
        }
    }

    private void ResetCombat()
    {
        CombatStateService.Reset();
    }

    private void RefreshParties()
    {
        parties = PartyStateService.GetAllParties().ToList();
        StateHasChanged();
    }

    private void RefreshCombatants()
    {
        combatants = CombatStateService.Combatants;
        StateHasChanged();
    }

    public void Dispose()
    {
        PartyStateService.OnChange -= RefreshParties;
        CombatStateService.OnChange -= RefreshCombatants;
    }
}
